#!groovy
import groovy.json.JsonSlurperClassic
node {

    def BUILD_NUMBER=env.BUILD_NUMBER
    def RUN_ARTIFACT_DIR="tests/${BUILD_NUMBER}"
    def CLASSES_ARTIFACT_DIR="force-app/main/default/classes"
    def TESTS_ARTIFACT_DIR="force-app/test/default/classes"
    def SFDC_USERNAME
    def SFDC_USERPWD

    def HUB_ORG=env.HUB_ORG_DH
    def SFDC_HOST = env.SFDC_HOST_DH
    def JWT_KEY_CRED_ID = env.JWT_CRED_ID_DH
    def CONNECTED_APP_CONSUMER_KEY=env.CONNECTED_APP_CONSUMER_KEY_DH

    def toolbelt = tool 'toolbelt'

    stage('checkout source') {
        // when running in multi-branch job, one must issue this command
        checkout scm
    }

    withCredentials([file(credentialsId: JWT_KEY_CRED_ID, variable: 'jwt_key_file')]) {

        stage('Check Missing Tests') {
            def workspace = pwd()
            def missingTestClasses = []
            def classes = new FileNameFinder().getFileNames("${workspace}/${CLASSES_ARTIFACT_DIR}", '**/*.cls' /* includes */)
            def tests = new FileNameFinder().getFileNames("${workspace}/${TESTS_ARTIFACT_DIR}", '**/*.cls' /* includes */)
            for(String className : classes){
                def classActualName = className.substring(className.lastIndexOf('/'),className.size())
                def fixedTestName = classActualName.replace('.cls','Test.cls')
                if(!tests.contains(fixedTestName))
                    missingTestClasses.add(classActualName)
            }
            if (missingTestClasses.size() > 0) {
                def classnamesString = missingTestClasses.toString()
                error "ERROR: Las siguientes clases no tienen Unit Test: \n ${classnamesString}"
                currentBuild.result = 'FAIL'
            }
        }

        stage('Create Scratch Org') {

            rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:auth:jwt:grant --clientid ${CONNECTED_APP_CONSUMER_KEY} --username ${HUB_ORG} --jwtkeyfile ${jwt_key_file} --setdefaultdevhubusername --instanceurl ${SFDC_HOST}"
            if (rc != 0) { error 'hub org authorization failed' }

            // need to pull out assigned username
            rmsg = sh returnStdout: true, script: "${toolbelt}/sfdx force:org:create --definitionfile config/project-scratch-def.json --json --setdefaultusername".trim()
            printf rmsg
            def jsonSlurper = new JsonSlurperClassic()
            def robj = jsonSlurper.parseText(rmsg)
            if (robj.status != 0) { error 'org creation failed: ' + robj.message }
            SFDC_USERNAME=robj.result.username
            robj = null
        }
        
        /*stage('Se password Scratch Org') {

            // need to pull out assigned username
            //rmsg = sh returnStdout: true, script: "${toolbelt}/sfdx force:org:create --definitionfile config/project-scratch-def.json --json --setdefaultusername".trim()
            rmsg = sh returnStdout: true, script: "${toolbelt}/sfdx force:user:password:generate  --json --targetusername ${SFDC_USERNAME}"
            printf rmsg
            def jsonSlurper = new JsonSlurperClassic()
            def robj = jsonSlurper.parseText(rmsg)
            if (robj.status != 0) { error 'org password generation failed: ' + robj.message }
            SFDC_USERPWD=robj.result.password
            printf SFDC_USERPWD
            robj = null
        }*/

        stage('Push To Test Org') {
            rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:source:push --targetusername ${SFDC_USERNAME}"
            if (rc != 0) {
                error 'push failed'
            }
            // assign permset
            rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:user:permset:assign --targetusername ${SFDC_USERNAME} --permsetname DreamHouse"
            if (rc != 0) {
                error 'permset:assign failed'
            }
        }

        stage('Run Apex Test') {
            sh "mkdir -p ${RUN_ARTIFACT_DIR}"
            timeout(time: 120, unit: 'SECONDS') {
                rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:apex:test:run --testlevel RunLocalTests --outputdir ${RUN_ARTIFACT_DIR} --codecoverage --resultformat tap --targetusername ${SFDC_USERNAME}"
                if (rc != 0) {
                    error 'apex test run failed'
                }
            }
        }

        stage('Check Test Coverage') {
            def workspace = pwd()
            def jsonSlurper = new JsonSlurperClassic()
            def failingClasses = []
            def inputFile = new File("${workspace}/${RUN_ARTIFACT_DIR}/test-result-codecoverage.json")
            def inputJSON = jsonSlurper.parse(inputFile)
            for (Map thisResult : inputJSON) {
                def className = thisResult.get('name')
                def coverage = thisResult.get('coveredPercent')
                if (coverage < 70) {
                    failingClasses.add(className)
                }
            }
            if (failingClasses.size() > 0) {
                def classnamesString = failingClasses.toString()
                echo "ERROR: Las siguientes clases no cumplieron con la cobertura de codigo: \n ${classnamesString}"
                currentBuild.result = 'FAIL'
            }
        }

        stage('collect results') {
            junit keepLongStdio: true, testResults: 'tests/**/*-junit.xml'
        }

        /*stage('Delete Test Org') {

            timeout(time: 120, unit: 'SECONDS') {
                rc = sh returnStatus: true, script: "${toolbelt}/sfdx force:org:delete --targetusername ${SFDC_USERNAME} --noprompt"
                if (rc != 0) {
                    error 'org deletion request failed'
                }
            }
        }*/
    }
}
